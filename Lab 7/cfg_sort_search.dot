digraph CFG {
  0 [label="Entry", shape=box];
  1 [label="int main()
int n, choice = -1, i, j, temp, key, k, repeat;
int arr[100];
srand(time(NULL));
printf(&#x27;Enter number of elements (max 100): &#x27;);
scanf(&#x27;%d&#x27;, &amp;n);
printf(&#x27;Choose input method:\\n1. Enter manually\\n2. Generate randomly\\n&#x27;);
scanf(&#x27;%d&#x27;, &amp;choice);", shape=box];
  2 [label="if(choice == 1)", shape=box];
  3 [label="for(i = 0; i &lt; n; i++)", shape=box];
  4 [label="printf(&#x27;Enter element %d: &#x27;, i + 1);
scanf(&#x27;%d&#x27;, &amp;arr[i]);", shape=box];
  5 [label="else", shape=box];
  6 [label="for(i = 0; i &lt; n; i++)", shape=box];
  7 [label="arr[i] = rand() % 1000;
printf(&#x27;Random array generated:\\n&#x27;);", shape=box];
  8 [label="for(i = 0; i &lt; n; i++)", shape=box];
  9 [label="printf(&#x27;%d &#x27;, arr[i]);
printf(&#x27;\\n&#x27;);
choice = -1;", shape=box];
  10 [label="while(choice != 0)", shape=box];
  11 [label="printf(&#x27;\\n=== Sorting &amp; Searching Suite ===\\n&#x27;);
printf(&#x27;1. Bubble Sort\\n&#x27;);
printf(&#x27;2. Insertion Sort\\n&#x27;);
printf(&#x27;3. Merge Sort\\n&#x27;);
printf(&#x27;4. Quick Sort\\n&#x27;);
printf(&#x27;5. Linear Search\\n&#x27;);
printf(&#x27;6. Binary Search\\n&#x27;);
printf(&#x27;7. Print Array\\n&#x27;);
printf(&#x27;8. Count Inversions\\n&#x27;);
printf(&#x27;9. Find kth Largest / Smallest\\n&#x27;);
printf(&#x27;10. Reverse Array\\n&#x27;);
printf(&#x27;11. Shuffle Array\\n&#x27;);
printf(&#x27;0. Exit\\n&#x27;);
printf(&#x27;Enter choice: &#x27;);
scanf(&#x27;%d&#x27;, &amp;choice);", shape=box];
  12 [label="if(choice == 1)", shape=box];
  13 [label="for(i = 0; i &lt; n - 1; i++)", shape=box];
  14 [label="for(j = 0; j &lt; n - i - 1; j++)", shape=box];
  15 [label="if(arr[j] &gt; arr[j + 1])", shape=box];
  16 [label="temp = arr[j];
arr[j] = arr[j + 1];
arr[j + 1] = temp;
printf(&#x27;Array sorted using Bubble Sort.\\n&#x27;);", shape=box];
  17 [label="else if(choice == 2)", shape=box];
  18 [label="for(i = 1; i &lt; n; i++)", shape=box];
  19 [label="temp = arr[i];
j = i - 1;", shape=box];
  20 [label="while(j &gt;= 0 &amp;&amp; arr[j] &gt; temp)", shape=box];
  21 [label="arr[j + 1] = arr[j];
j--;
arr[j + 1] = temp;
printf(&#x27;Array sorted using Insertion Sort.\\n&#x27;);", shape=box];
  22 [label="else if(choice == 3)", shape=box];
  23 [label="int width, left, right, mid, l, r;
int temp_arr[100];", shape=box];
  24 [label="for(width = 1; width &lt; n; width *= 2)", shape=box];
  25 [label="for(i = 0; i &lt; n; i += 2 * width)", shape=box];
  26 [label="left = i;
mid = i + width - 1;
right = i + 2 * width - 1;", shape=box];
  27 [label="if(mid &gt;= n)", shape=box];
  28 [label="mid = n - 1;", shape=box];
  29 [label="if(right &gt;= n)", shape=box];
  30 [label="right = n - 1;
l = left;
r = mid + 1;
j = left;", shape=box];
  31 [label="while(l &lt;= mid &amp;&amp; r &lt;= right)", shape=box];
  32 [label="if(arr[l] &lt;= arr[r])", shape=box];
  33 [label="temp_arr[j++] = arr[l++];", shape=box];
  34 [label="else", shape=box];
  35 [label="temp_arr[j++] = arr[r++];", shape=box];
  36 [label="while(l &lt;= mid)", shape=box];
  37 [label="temp_arr[j++] = arr[l++];", shape=box];
  38 [label="while(r &lt;= right)", shape=box];
  39 [label="temp_arr[j++] = arr[r++];", shape=box];
  40 [label="for(j = left; j &lt;= right; j++)", shape=box];
  41 [label="arr[j] = temp_arr[j];
printf(&#x27;Array sorted using Merge Sort.\\n&#x27;);", shape=box];
  42 [label="else if(choice == 4)", shape=box];
  43 [label="int stack[100], top = -1, low, high, pivot, p;
stack[++top] = 0;
stack[++top] = n - 1;", shape=box];
  44 [label="while(top &gt;= 0)", shape=box];
  45 [label="high = stack[top--];
low = stack[top--];
pivot = arr[high];
i = low - 1;", shape=box];
  46 [label="for(j = low; j &lt;= high - 1; j++)", shape=box];
  47 [label="if(arr[j] &lt; pivot)", shape=box];
  48 [label="i++;
temp = arr[i];
arr[i] = arr[j];
arr[j] = temp;
temp = arr[i + 1];
arr[i + 1] = arr[high];
arr[high] = temp;
p = i + 1;", shape=box];
  49 [label="if(p - 1 &gt; low)", shape=box];
  50 [label="stack[++top] = low;
stack[++top] = p - 1;", shape=box];
  51 [label="if(p + 1 &lt; high)", shape=box];
  52 [label="stack[++top] = p + 1;
stack[++top] = high;
printf(&#x27;Array sorted using Quick Sort.\\n&#x27;);", shape=box];
  53 [label="else if(choice == 5)", shape=box];
  54 [label="printf(&#x27;Enter key to search: &#x27;);
scanf(&#x27;%d&#x27;, &amp;key);
int found = 0;", shape=box];
  55 [label="for(i = 0; i &lt; n; i++)", shape=box];
  56 [label="if(arr[i] == key)", shape=box];
  57 [label="found = 1;", shape=box];
  58 [label="break;", shape=box];
  59 [label="if(found)", shape=box];
  60 [label="printf(&#x27;Key %d found at index %d.\\n&#x27;, key, i);", shape=box];
  61 [label="else", shape=box];
  62 [label="printf(&#x27;Key %d not found.\\n&#x27;, key);", shape=box];
  63 [label="else if(choice == 6)", shape=box];
  64 [label="printf(&#x27;Enter key to search: &#x27;);
scanf(&#x27;%d&#x27;, &amp;key);
int left = 0, right = n - 1, found = 0, mid;", shape=box];
  65 [label="while(left &lt;= right)", shape=box];
  66 [label="mid = (left + right) / 2;", shape=box];
  67 [label="if(arr[mid] == key)", shape=box];
  68 [label="found = 1;", shape=box];
  69 [label="break;", shape=box];
  70 [label="else if(arr[mid] &lt; key)", shape=box];
  71 [label="left = mid + 1;", shape=box];
  72 [label="else", shape=box];
  73 [label="right = mid - 1;", shape=box];
  74 [label="if(found)", shape=box];
  75 [label="printf(&#x27;Key %d found at index %d.\\n&#x27;, key, mid);", shape=box];
  76 [label="else", shape=box];
  77 [label="printf(&#x27;Key %d not found.\\n&#x27;, key);", shape=box];
  78 [label="else if(choice == 7)", shape=box];
  79 [label="printf(&#x27;Array: &#x27;);", shape=box];
  80 [label="for(i = 0; i &lt; n; i++)", shape=box];
  81 [label="printf(&#x27;%d &#x27;, arr[i]);
printf(&#x27;\\n&#x27;);", shape=box];
  82 [label="else if(choice == 8)", shape=box];
  83 [label="int inv = 0;", shape=box];
  84 [label="for(i = 0; i &lt; n; i++)", shape=box];
  85 [label="for(j = i + 1; j &lt; n; j++)", shape=box];
  86 [label="if(arr[i] &gt; arr[j])", shape=box];
  87 [label="inv++;
printf(&#x27;Number of inversions: %d\\n&#x27;, inv);", shape=box];
  88 [label="else if(choice == 9)", shape=box];
  89 [label="int temp_arr[100];", shape=box];
  90 [label="for(i = 0; i &lt; n; i++)", shape=box];
  91 [label="temp_arr[i] = arr[i];", shape=box];
  92 [label="for(i = 0; i &lt; n - 1; i++)", shape=box];
  93 [label="for(j = 0; j &lt; n - i - 1; j++)", shape=box];
  94 [label="if(temp_arr[j] &gt; temp_arr[j + 1])", shape=box];
  95 [label="temp = temp_arr[j];
temp_arr[j] = temp_arr[j + 1];
temp_arr[j + 1] = temp;
printf(&#x27;Enter k (1-%d): &#x27;, n);
scanf(&#x27;%d&#x27;, &amp;k);", shape=box];
  96 [label="if(k &gt;= 1 &amp;&amp; k &lt;= n)", shape=box];
  97 [label="printf(&#x27;k-th smallest: %d, k-th largest: %d\\n&#x27;, temp_arr[k - 1], temp_arr[n - k]);", shape=box];
  98 [label="else", shape=box];
  99 [label="printf(&#x27;Invalid k.\\n&#x27;);", shape=box];
  100 [label="else if(choice == 10)", shape=box];
  101 [label="for(i = 0; i &lt; n / 2; i++)", shape=box];
  102 [label="temp = arr[i];
arr[i] = arr[n - i - 1];
arr[n - i - 1] = temp;
printf(&#x27;Array reversed.\\n&#x27;);", shape=box];
  103 [label="else if(choice == 11)", shape=box];
  104 [label="for(i = n - 1; i &gt; 0; i--)", shape=box];
  105 [label="j = rand() % (i + 1);
temp = arr[i];
arr[i] = arr[j];
arr[j] = temp;
printf(&#x27;Array shuffled.\\n&#x27;);", shape=box];
  106 [label="else if(choice != 0)", shape=box];
  107 [label="printf(&#x27;Invalid option. Try again.\\n&#x27;);
printf(&#x27;Final Array:\\n&#x27;);", shape=box];
  108 [label="for(i = 0; i &lt; n; i++)", shape=box];
  109 [label="printf(&#x27;%d &#x27;, arr[i]);
printf(&#x27;\\nExiting program.\\n&#x27;);
printf(&#x27;Final Array:\\n&#x27;);", shape=box];
  110 [label="for(i = 0; i &lt; n; i++)", shape=box];
  111 [label="printf(&#x27;%d &#x27;, arr[i]);
printf(&#x27;\\n&#x27;);
int sum = 0, min = arr[0], max = arr[0];", shape=box];
  112 [label="for(i = 0; i &lt; n; i++)", shape=box];
  113 [label="sum += arr[i];", shape=box];
  114 [label="if(arr[i] &lt; min)", shape=box];
  115 [label="min = arr[i];", shape=box];
  116 [label="if(arr[i] &gt; max)", shape=box];
  117 [label="max = arr[i];
printf(&#x27;Array Statistics:\\n&#x27;);
printf(&#x27;Sum: %d\\n&#x27;, sum);
printf(&#x27;Average: %.2f\\n&#x27;, sum / (float)n);
printf(&#x27;Min: %d, Max: %d\\n&#x27;, min, max);
printf(&#x27;Do you want to run another array? Enter 1 for yes, 0 for no: &#x27;);
scanf(&#x27;%d&#x27;, &amp;repeat);", shape=box];
  118 [label="if(repeat == 1)", shape=box];
  119 [label="printf(&#x27;Restart the program to input a new array.\\n&#x27;);
printf(&#x27;Exiting program.\\n&#x27;);", shape=box];
  120 [label="return 0;", shape=box];
  121 [label="Exit", shape=box];
  0 -> 1;
  1 -> 2;
  2 -> 3;
  3 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 14;
  15 -> 13;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 20;
  20 -> 18;
  20 -> 10;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  32 -> 34;
  32 -> 42;
  32 -> 53;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 40;
  40 -> 38;
  40 -> 36;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 46;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 44;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  55 -> 56;
  56 -> 57;
  57 -> 55;
  57 -> 58;
  58 -> 59;
  59 -> 60;
  59 -> 61;
  59 -> 63;
  60 -> 61;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  65 -> 66;
  66 -> 67;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 65;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  74 -> 76;
  74 -> 78;
  75 -> 76;
  76 -> 77;
  77 -> 78;
  78 -> 79;
  78 -> 82;
  79 -> 80;
  80 -> 80;
  80 -> 81;
  81 -> 82;
  82 -> 83;
  82 -> 88;
  82 -> 100;
  82 -> 103;
  82 -> 106;
  83 -> 84;
  84 -> 85;
  85 -> 86;
  86 -> 85;
  86 -> 84;
  86 -> 87;
  87 -> 88;
  88 -> 89;
  89 -> 90;
  90 -> 91;
  91 -> 92;
  92 -> 93;
  93 -> 94;
  94 -> 93;
  94 -> 92;
  94 -> 95;
  95 -> 96;
  96 -> 97;
  97 -> 98;
  98 -> 90;
  98 -> 99;
  99 -> 100;
  100 -> 101;
  101 -> 101;
  101 -> 102;
  102 -> 103;
  103 -> 104;
  104 -> 104;
  104 -> 105;
  105 -> 106;
  106 -> 107;
  107 -> 108;
  108 -> 109;
  109 -> 110;
  110 -> 111;
  111 -> 112;
  112 -> 113;
  113 -> 114;
  114 -> 115;
  115 -> 116;
  116 -> 117;
  117 -> 118;
  118 -> 119;
  119 -> 120;
  120 -> 121;
}
