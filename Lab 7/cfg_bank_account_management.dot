digraph CFG {
  0 [label="Entry", shape=box];
  1 [label="int main()
Account accounts[MAX_ACCOUNTS];
int count = 0;
int choice = -1;", shape=box];
  2 [label="while(choice != 0)", shape=box];
  3 [label="printf(&#x27;\\n=== BANK MANAGEMENT SYSTEM ===\\n&#x27;);
printf(&#x27;1. Add New Account\\n&#x27;);
printf(&#x27;2. Delete Account\\n&#x27;);
printf(&#x27;3. Deposit\\n&#x27;);
printf(&#x27;4. Withdraw\\n&#x27;);
printf(&#x27;5. Transfer\\n&#x27;);
printf(&#x27;6. Display Account\\n&#x27;);
printf(&#x27;7. Display All Accounts\\n&#x27;);
printf(&#x27;8. Apply Interest\\n&#x27;);
printf(&#x27;9. Monthly Statement\\n&#x27;);
printf(&#x27;0. Exit\\n&#x27;);
printf(&#x27;Enter your choice: &#x27;);
scanf(&#x27;%d&#x27;, &amp;choice);
int acc_no, i, j;
double amount;
char temp[100];", shape=box];
  4 [label="switch(choice)", shape=box];
  5 [label="case 1:", shape=box];
  6 [label="if(count &gt;= MAX_ACCOUNTS)", shape=box];
  7 [label="printf(&#x27;Maximum accounts reached!\\n&#x27;);", shape=box];
  8 [label="break;", shape=box];
  9 [label="accounts[count].acc_no = count + 1;
printf(&#x27;Enter Name: &#x27;);
scanf(&#x27; %[^\\n]&#x27;, accounts[count].name);
printf(&#x27;Enter Address: &#x27;);
scanf(&#x27; %[^\\n]&#x27;, accounts[count].address);
printf(&#x27;Enter Phone: &#x27;);
scanf(&#x27; %[^\\n]&#x27;, accounts[count].phone);
printf(&#x27;Enter Email: &#x27;);
scanf(&#x27; %[^\\n]&#x27;, accounts[count].email);
printf(&#x27;Enter Account Type (Savings/Current): &#x27;);
scanf(&#x27;%s&#x27;, accounts[count].type);
accounts[count].balance = 0.0;
printf(&#x27;Account created! Account Number: %d\\n&#x27;, accounts[count].acc_no);
count++;", shape=box];
  10 [label="break;", shape=box];
  11 [label="case 2:
printf(&#x27;Enter Account Number to delete: &#x27;);
scanf(&#x27;%d&#x27;, &amp;acc_no);", shape=box];
  12 [label="for(i=0; i&lt;count; i++)", shape=box];
  13 [label="if(accounts[i].acc_no == acc_no)", shape=box];
  14 [label="for(j=i; j&lt;count-1; j++)", shape=box];
  15 [label="accounts[j] = accounts[j+1];
count--;
printf(&#x27;Account %d deleted.\\n&#x27;, acc_no);", shape=box];
  16 [label="break;", shape=box];
  17 [label="if(i==count)", shape=box];
  18 [label="printf(&#x27;Account not found!\\n&#x27;);", shape=box];
  19 [label="break;", shape=box];
  20 [label="case 3:
printf(&#x27;Enter Account Number to deposit: &#x27;);
scanf(&#x27;%d&#x27;, &amp;acc_no);
printf(&#x27;Enter Amount: &#x27;);
scanf(&#x27;%lf&#x27;, &amp;amount);", shape=box];
  21 [label="for(i=0; i&lt;count; i++)", shape=box];
  22 [label="if(accounts[i].acc_no == acc_no)", shape=box];
  23 [label="accounts[i].balance += amount;
printf(&#x27;Deposited %.2lf. New Balance: %.2lf\\n&#x27;, amount, accounts[i].balance);", shape=box];
  24 [label="break;", shape=box];
  25 [label="if(i==count)", shape=box];
  26 [label="printf(&#x27;Account not found!\\n&#x27;);", shape=box];
  27 [label="break;", shape=box];
  28 [label="case 4:
printf(&#x27;Enter Account Number to withdraw: &#x27;);
scanf(&#x27;%d&#x27;, &amp;acc_no);
printf(&#x27;Enter Amount: &#x27;);
scanf(&#x27;%lf&#x27;, &amp;amount);", shape=box];
  29 [label="for(i=0; i&lt;count; i++)", shape=box];
  30 [label="if(accounts[i].acc_no == acc_no)", shape=box];
  31 [label="if(accounts[i].balance &gt;= amount)", shape=box];
  32 [label="accounts[i].balance -= amount;
printf(&#x27;Withdrawn %.2lf. New Balance: %.2lf\\n&#x27;, amount, accounts[i].balance);", shape=box];
  33 [label="else", shape=box];
  34 [label="printf(&#x27;Insufficient balance!\\n&#x27;);", shape=box];
  35 [label="break;", shape=box];
  36 [label="if(i==count)", shape=box];
  37 [label="printf(&#x27;Account not found!\\n&#x27;);", shape=box];
  38 [label="break;", shape=box];
  39 [label="case 5:
int dest_acc;
printf(&#x27;Enter Source Account Number: &#x27;);
scanf(&#x27;%d&#x27;, &amp;acc_no);
printf(&#x27;Enter Destination Account Number: &#x27;);
scanf(&#x27;%d&#x27;, &amp;dest_acc);
printf(&#x27;Enter Amount: &#x27;);
scanf(&#x27;%lf&#x27;, &amp;amount);
int src_idx=-1, dest_idx=-1;", shape=box];
  40 [label="for(i=0; i&lt;count; i++)", shape=box];
  41 [label="if(accounts[i].acc_no == acc_no)", shape=box];
  42 [label="src_idx = i;", shape=box];
  43 [label="if(accounts[i].acc_no == dest_acc)", shape=box];
  44 [label="dest_idx = i;", shape=box];
  45 [label="if(src_idx==-1 || dest_idx==-1)", shape=box];
  46 [label="printf(&#x27;One or both accounts not found!\\n&#x27;);", shape=box];
  47 [label="break;", shape=box];
  48 [label="if(accounts[src_idx].balance &gt;= amount)", shape=box];
  49 [label="accounts[src_idx].balance -= amount;
accounts[dest_idx].balance += amount;
printf(&#x27;Transferred %.2lf from %d to %d\\n&#x27;, amount, acc_no, dest_acc);", shape=box];
  50 [label="else", shape=box];
  51 [label="printf(&#x27;Insufficient balance!\\n&#x27;);", shape=box];
  52 [label="break;", shape=box];
  53 [label="case 6:
printf(&#x27;Enter Account Number to display: &#x27;);
scanf(&#x27;%d&#x27;, &amp;acc_no);", shape=box];
  54 [label="for(i=0; i&lt;count; i++)", shape=box];
  55 [label="if(accounts[i].acc_no == acc_no)", shape=box];
  56 [label="printf(&#x27;Account No: %d\\nName: %s\\nBalance: %.2lf\\n&#x27;, accounts[i].acc_no, accounts[i].name, accounts[i].balance);", shape=box];
  57 [label="break;", shape=box];
  58 [label="if(i==count)", shape=box];
  59 [label="printf(&#x27;Account not found!\\n&#x27;);", shape=box];
  60 [label="break;", shape=box];
  61 [label="case 7:
printf(&#x27;All Accounts:\\n&#x27;);", shape=box];
  62 [label="for(i=0; i&lt;count; i++)", shape=box];
  63 [label="printf(&#x27;Acc: %d, Name: %s, Balance: %.2lf\\n&#x27;, accounts[i].acc_no, accounts[i].name, accounts[i].balance);", shape=box];
  64 [label="break;", shape=box];
  65 [label="case 8:
double rate;
printf(&#x27;Enter interest rate in %%: &#x27;);
scanf(&#x27;%lf&#x27;, &amp;rate);", shape=box];
  66 [label="for(i=0; i&lt;count; i++)", shape=box];
  67 [label="accounts[i].balance += (accounts[i].balance * rate / 100.0);
printf(&#x27;Interest applied.\\n&#x27;);", shape=box];
  68 [label="break;", shape=box];
  69 [label="case 9:
printf(&#x27;Monthly Statement:\\n&#x27;);", shape=box];
  70 [label="for(i=0; i&lt;count; i++)", shape=box];
  71 [label="printf(&#x27;Acc: %d, Name: %s, Balance: %.2lf\\n&#x27;, accounts[i].acc_no, accounts[i].name, accounts[i].balance);", shape=box];
  72 [label="break;", shape=box];
  73 [label="case 0:
printf(&#x27;Exiting...\\n&#x27;);", shape=box];
  74 [label="break;", shape=box];
  75 [label="default :
printf(&#x27;Invalid choice!\\n&#x27;);", shape=box];
  76 [label="return 0;", shape=box];
  77 [label="Exit", shape=box];
  0 -> 1;
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  4 -> 11;
  4 -> 20;
  4 -> 28;
  4 -> 39;
  4 -> 53;
  4 -> 61;
  4 -> 65;
  4 -> 69;
  4 -> 73;
  4 -> 75;
  5 -> 6;
  6 -> 7;
  6 -> 9;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  10 -> 77;
  11 -> 12;
  12 -> 13;
  12 -> 17;
  13 -> 12;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 12;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  19 -> 77;
  20 -> 21;
  21 -> 22;
  21 -> 25;
  22 -> 21;
  22 -> 23;
  23 -> 24;
  24 -> 21;
  25 -> 26;
  25 -> 77;
  26 -> 27;
  27 -> 28;
  27 -> 77;
  28 -> 29;
  29 -> 30;
  29 -> 36;
  30 -> 31;
  30 -> 33;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 29;
  36 -> 37;
  36 -> 76;
  37 -> 38;
  38 -> 39;
  38 -> 76;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  41 -> 50;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  45 -> 48;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  54 -> 58;
  55 -> 54;
  55 -> 56;
  56 -> 57;
  57 -> 54;
  58 -> 59;
  58 -> 67;
  59 -> 60;
  60 -> 61;
  60 -> 67;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  64 -> 67;
  65 -> 66;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  75 -> 40;
}
